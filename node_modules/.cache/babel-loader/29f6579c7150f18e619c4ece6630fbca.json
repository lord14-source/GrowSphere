{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\Python\\\\my-app\\\\src\\\\components\\\\MapComponent.js\";\nimport { GoogleMap, HeatmapLayer, LoadScript, Polygon } from '@react-google-maps/api';\nimport React, { useRef, useState } from 'react';\nconst MapComponent = ({\n  yieldForecast,\n  farmCoordinates,\n  heatmapData,\n  mapCenter,\n  mapZoom\n}) => {\n  const mapRef = useRef(null);\n  const [map, setMap] = useState(null);\n\n  // Dynamically determine the color based on the yield forecast\n  const determineColor = yieldForecast => {\n    if (yieldForecast < 50) {\n      return '#FF0000'; // Red for low yield\n    } else if (yieldForecast >= 50 && yieldForecast < 75) {\n      return '#FFFF00'; // Yellow for medium yield\n    } else {\n      return '#00FF00'; // Green for high yield\n    }\n  };\n  const onLoad = mapInstance => {\n    setMap(mapInstance);\n  };\n  return /*#__PURE__*/React.createElement(LoadScript, {\n    googleMapsApiKey: \"AIzaSyD0KaEX-bXcnOS7XFfLKnVyiet_Kfi-8xM\",\n    libraries: [\"visualization\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(GoogleMap, {\n    onLoad: onLoad,\n    mapContainerStyle: {\n      height: '400px',\n      width: '100%'\n    },\n    center: mapCenter || {\n      lat: 25.774,\n      lng: -80.190\n    } // Default to a specific location\n    ,\n    zoom: mapZoom || 5 // Default zoom level\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, map && /*#__PURE__*/React.createElement(React.Fragment, null, farmCoordinates && /*#__PURE__*/React.createElement(Polygon, {\n    paths: farmCoordinates,\n    options: {\n      strokeColor: '#000000',\n      strokeOpacity: 0.8,\n      strokeWeight: 2,\n      fillColor: determineColor(yieldForecast),\n      fillOpacity: 0.6\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 15\n    }\n  }), heatmapData && /*#__PURE__*/React.createElement(HeatmapLayer, {\n    data: heatmapData.map(coord => new window.google.maps.LatLng(coord.lat, coord.lng)),\n    options: {\n      radius: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 15\n    }\n  }))));\n};\n\n// Example usage\n// import MapComponent from './MapComponent';\n\n// const farmCoordinates = [\n//   { lat: 25.774, lng: -80.190 },\n//   { lat: 18.466, lng: -66.118 },\n//   { lat: 32.321, lng: -64.757 },\n//   { lat: 25.774, lng: -80.190 }\n// ];\n\n// const heatmapData = [\n//   { lat: 37.782, lng: -122.447 },\n//   { lat: 37.782, lng: -122.445 },\n//   { lat: 37.782, lng: -122.443 }\n// ];\n\n// <MapComponent\n//   yieldForecast={60}\n//   farmCoordinates={farmCoordinates}\n//   heatmapData={heatmapData}\n//   mapCenter={{ lat: 37.7749, lng: -122.4194 }} // Center on San Francisco\n//   mapZoom={8} // Zoom level\n// />\n\nexport default MapComponent;","map":{"version":3,"names":["GoogleMap","HeatmapLayer","LoadScript","Polygon","React","useRef","useState","MapComponent","yieldForecast","farmCoordinates","heatmapData","mapCenter","mapZoom","mapRef","map","setMap","determineColor","onLoad","mapInstance","createElement","googleMapsApiKey","libraries","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","mapContainerStyle","height","width","center","lat","lng","zoom","Fragment","paths","options","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","data","coord","window","google","maps","LatLng","radius"],"sources":["C:/Users/hp/Desktop/Python/my-app/src/components/MapComponent.js"],"sourcesContent":["import { GoogleMap, HeatmapLayer, LoadScript, Polygon } from '@react-google-maps/api';\nimport React, { useRef, useState } from 'react';\n\nconst MapComponent = ({ yieldForecast, farmCoordinates, heatmapData, mapCenter, mapZoom }) => {\n  const mapRef = useRef(null);\n  const [map, setMap] = useState(null);\n\n  // Dynamically determine the color based on the yield forecast\n  const determineColor = (yieldForecast) => {\n    if (yieldForecast < 50) {\n      return '#FF0000'; // Red for low yield\n    } else if (yieldForecast >= 50 && yieldForecast < 75) {\n      return '#FFFF00'; // Yellow for medium yield\n    } else {\n      return '#00FF00'; // Green for high yield\n    }\n  };\n\n  const onLoad = (mapInstance) => {\n    setMap(mapInstance);\n  };\n\n  return (\n    <LoadScript\n      googleMapsApiKey=\"AIzaSyD0KaEX-bXcnOS7XFfLKnVyiet_Kfi-8xM\"\n      libraries={[\"visualization\"]}\n    >\n      <GoogleMap\n        onLoad={onLoad}\n        mapContainerStyle={{ height: '400px', width: '100%' }}\n        center={mapCenter || { lat: 25.774, lng: -80.190 }} // Default to a specific location\n        zoom={mapZoom || 5} // Default zoom level\n      >\n        {map && (\n          <>\n            {/* Dynamic Polygon with color based on yieldForecast */}\n            {farmCoordinates && (\n              <Polygon\n                paths={farmCoordinates}\n                options={{\n                  strokeColor: '#000000',\n                  strokeOpacity: 0.8,\n                  strokeWeight: 2,\n                  fillColor: determineColor(yieldForecast),\n                  fillOpacity: 0.6\n                }}\n              />\n            )}\n            \n            {/* Dynamic Heatmap Layer */}\n            {heatmapData && (\n              <HeatmapLayer\n                data={heatmapData.map(coord => new window.google.maps.LatLng(coord.lat, coord.lng))}\n                options={{ radius: 20 }}\n              />\n            )}\n          </>\n        )}\n      </GoogleMap>\n    </LoadScript>\n  );\n};\n\n// Example usage\n// import MapComponent from './MapComponent';\n\n// const farmCoordinates = [\n//   { lat: 25.774, lng: -80.190 },\n//   { lat: 18.466, lng: -66.118 },\n//   { lat: 32.321, lng: -64.757 },\n//   { lat: 25.774, lng: -80.190 }\n// ];\n\n// const heatmapData = [\n//   { lat: 37.782, lng: -122.447 },\n//   { lat: 37.782, lng: -122.445 },\n//   { lat: 37.782, lng: -122.443 }\n// ];\n\n// <MapComponent\n//   yieldForecast={60}\n//   farmCoordinates={farmCoordinates}\n//   heatmapData={heatmapData}\n//   mapCenter={{ lat: 37.7749, lng: -122.4194 }} // Center on San Francisco\n//   mapZoom={8} // Zoom level\n// />\n\nexport default MapComponent;\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,YAAY,EAAEC,UAAU,EAAEC,OAAO,QAAQ,wBAAwB;AACrF,OAAOC,KAAK,IAAIC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAE/C,MAAMC,YAAY,GAAGA,CAAC;EAAEC,aAAa;EAAEC,eAAe;EAAEC,WAAW;EAAEC,SAAS;EAAEC;AAAQ,CAAC,KAAK;EAC5F,MAAMC,MAAM,GAAGR,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAM,CAACS,GAAG,EAAEC,MAAM,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;;EAEpC;EACA,MAAMU,cAAc,GAAIR,aAAa,IAAK;IACxC,IAAIA,aAAa,GAAG,EAAE,EAAE;MACtB,OAAO,SAAS,CAAC,CAAC;IACpB,CAAC,MAAM,IAAIA,aAAa,IAAI,EAAE,IAAIA,aAAa,GAAG,EAAE,EAAE;MACpD,OAAO,SAAS,CAAC,CAAC;IACpB,CAAC,MAAM;MACL,OAAO,SAAS,CAAC,CAAC;IACpB;EACF,CAAC;EAED,MAAMS,MAAM,GAAIC,WAAW,IAAK;IAC9BH,MAAM,CAACG,WAAW,CAAC;EACrB,CAAC;EAED,oBACEd,KAAA,CAAAe,aAAA,CAACjB,UAAU;IACTkB,gBAAgB,EAAC,yCAAyC;IAC1DC,SAAS,EAAE,CAAC,eAAe,CAAE;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAE7BvB,KAAA,CAAAe,aAAA,CAACnB,SAAS;IACRiB,MAAM,EAAEA,MAAO;IACfW,iBAAiB,EAAE;MAAEC,MAAM,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAO,CAAE;IACtDC,MAAM,EAAEpB,SAAS,IAAI;MAAEqB,GAAG,EAAE,MAAM;MAAEC,GAAG,EAAE,CAAC;IAAO,CAAE,CAAC;IAAA;IACpDC,IAAI,EAAEtB,OAAO,IAAI,CAAE,CAAC;IAAA;IAAAU,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAEnBb,GAAG,iBACFV,KAAA,CAAAe,aAAA,CAAAf,KAAA,CAAA+B,QAAA,QAEG1B,eAAe,iBACdL,KAAA,CAAAe,aAAA,CAAChB,OAAO;IACNiC,KAAK,EAAE3B,eAAgB;IACvB4B,OAAO,EAAE;MACPC,WAAW,EAAE,SAAS;MACtBC,aAAa,EAAE,GAAG;MAClBC,YAAY,EAAE,CAAC;MACfC,SAAS,EAAEzB,cAAc,CAACR,aAAa,CAAC;MACxCkC,WAAW,EAAE;IACf,CAAE;IAAApB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACH,CACF,EAGAjB,WAAW,iBACVN,KAAA,CAAAe,aAAA,CAAClB,YAAY;IACX0C,IAAI,EAAEjC,WAAW,CAACI,GAAG,CAAC8B,KAAK,IAAI,IAAIC,MAAM,CAACC,MAAM,CAACC,IAAI,CAACC,MAAM,CAACJ,KAAK,CAACZ,GAAG,EAAEY,KAAK,CAACX,GAAG,CAAC,CAAE;IACpFI,OAAO,EAAE;MAAEY,MAAM,EAAE;IAAG,CAAE;IAAA3B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CACzB,CAEH,CAEK,CACD,CAAC;AAEjB,CAAC;;AAED;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAepB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module"}
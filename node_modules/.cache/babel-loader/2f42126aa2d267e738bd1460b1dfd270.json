{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\Python\\\\my-app\\\\src\\\\components\\\\MapComponent.js\";\nimport { GoogleMap, PolygonF, useJsApiLoader } from '@react-google-maps/api';\nimport React, { useCallback, useRef } from 'react';\nconst containerStyle = {\n  width: '100%',\n  height: '600px'\n};\n\n// Center point set to Jharkhand level\nconst center = {\n  lat: 23.6102,\n  // Latitude of Jharkhand\n  lng: 85.2799 // Longitude of Jharkhand\n};\nconst zoomLevel = 6; // Initial zoom level for a broader view\n\n// Coordinates for the Jharkhand polygon\nconst jharkhandCoords = [{\n  lat: 24.4366,\n  lng: 84.2201\n},\n// Northern border\n{\n  lat: 24.1851,\n  lng: 85.0568\n},\n// Slightly south\n{\n  lat: 23.9867,\n  lng: 85.6182\n},\n// Mid-north\n{\n  lat: 23.6255,\n  lng: 86.4194\n},\n// North-east\n{\n  lat: 23.1986,\n  lng: 86.8941\n},\n// Eastern side\n{\n  lat: 22.7767,\n  lng: 86.6826\n},\n// South-east\n{\n  lat: 22.3571,\n  lng: 85.9870\n},\n// Southern border\n{\n  lat: 22.2786,\n  lng: 85.3999\n},\n// South-west\n{\n  lat: 22.7027,\n  lng: 84.8895\n},\n// West\n{\n  lat: 23.1097,\n  lng: 84.6137\n},\n// Mid-west\n{\n  lat: 23.7197,\n  lng: 84.4003\n},\n// North-west\n{\n  lat: 24.0020,\n  lng: 84.4666\n} // Closing the boundary\n];\n\n// Coordinates for the Ranchi polygon\nconst ranchiCoords = [{\n  lat: 23.2470,\n  lng: 85.2632\n},\n// Northern point\n{\n  lat: 23.2436,\n  lng: 85.3134\n},\n// Northeast point\n{\n  lat: 23.2882,\n  lng: 85.3306\n},\n// East point\n{\n  lat: 23.3025,\n  lng: 85.3660\n},\n// Southeast point\n{\n  lat: 23.3294,\n  lng: 85.3848\n},\n// Southern point\n{\n  lat: 23.3561,\n  lng: 85.3434\n},\n// Southwest point\n{\n  lat: 23.3081,\n  lng: 85.2940\n},\n// West point\n{\n  lat: 23.2470,\n  lng: 85.2632\n} // Closing the boundary\n];\nconst MapComponent = () => {\n  const {\n    isLoaded\n  } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: \"AIzaSyChN074R5gt4BfPTFox9UXnND0S8yyH6Dk\" // Replace with your Google Maps API key\n  });\n  const mapRef = useRef(null); // Using useRef instead of state to store map instance\n\n  // Save the map instance when loaded\n  const onLoad = useCallback(mapInstance => {\n    console.log(\"Map loaded:\", mapInstance);\n    mapRef.current = mapInstance; // Store map instance in ref\n  }, []);\n\n  // Zoom in and fit the polygon's bounds when clicked\n  const handlePolygonClick = useCallback(polygonCoords => {\n    const map = mapRef.current;\n    if (!map) {\n      console.log(\"Map instance not available.\");\n      return;\n    }\n    console.log(\"Polygon clicked, zooming in...\");\n    const bounds = new window.google.maps.LatLngBounds();\n    polygonCoords.forEach(coord => bounds.extend(coord));\n    map.fitBounds(bounds);\n\n    // Optional: Set a custom zoom level after fitting bounds\n    const listener = window.google.maps.event.addListener(map, \"idle\", () => {\n      if (map.getZoom() > 10) {\n        map.setZoom(10); // Set desired zoom level\n      }\n      window.google.maps.event.removeListener(listener); // Remove the listener after zooming\n    });\n  }, []);\n  return isLoaded ? /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: 'relative'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(GoogleMap, {\n    mapContainerStyle: containerStyle,\n    center: center,\n    zoom: zoomLevel,\n    onLoad: onLoad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(PolygonF, {\n    paths: jharkhandCoords,\n    options: {\n      fillColor: '#00FF00',\n      strokeColor: '#000000',\n      fillOpacity: 0.5\n    },\n    onClick: () => {\n      console.log(\"Jharkhand polygon clicked\");\n      handlePolygonClick(jharkhandCoords);\n    } // Zoom into Jharkhand when clicked\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(PolygonF, {\n    paths: ranchiCoords,\n    options: {\n      fillColor: '#FF5733',\n      // Different color for Ranchi\n      strokeColor: '#000000',\n      fillOpacity: 0.5\n    },\n    onClick: () => {\n      console.log(\"Ranchi polygon clicked\");\n      handlePolygonClick(ranchiCoords);\n    } // Zoom into Ranchi when clicked\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }))) : /*#__PURE__*/React.createElement(React.Fragment, null);\n};\nexport default MapComponent;","map":{"version":3,"names":["GoogleMap","PolygonF","useJsApiLoader","React","useCallback","useRef","containerStyle","width","height","center","lat","lng","zoomLevel","jharkhandCoords","ranchiCoords","MapComponent","isLoaded","id","googleMapsApiKey","mapRef","onLoad","mapInstance","console","log","current","handlePolygonClick","polygonCoords","map","bounds","window","google","maps","LatLngBounds","forEach","coord","extend","fitBounds","listener","event","addListener","getZoom","setZoom","removeListener","createElement","style","position","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","mapContainerStyle","zoom","paths","options","fillColor","strokeColor","fillOpacity","onClick","Fragment"],"sources":["C:/Users/hp/Desktop/Python/my-app/src/components/MapComponent.js"],"sourcesContent":["import { GoogleMap, PolygonF, useJsApiLoader } from '@react-google-maps/api';\nimport React, { useCallback, useRef } from 'react';\n\nconst containerStyle = {\n  width: '100%',\n  height: '600px',\n};\n\n// Center point set to Jharkhand level\nconst center = {\n  lat: 23.6102,  // Latitude of Jharkhand\n  lng: 85.2799,  // Longitude of Jharkhand\n};\n\nconst zoomLevel = 6;  // Initial zoom level for a broader view\n\n// Coordinates for the Jharkhand polygon\nconst jharkhandCoords = [\n  { lat: 24.4366, lng: 84.2201 },  // Northern border\n  { lat: 24.1851, lng: 85.0568 },  // Slightly south\n  { lat: 23.9867, lng: 85.6182 },  // Mid-north\n  { lat: 23.6255, lng: 86.4194 },  // North-east\n  { lat: 23.1986, lng: 86.8941 },  // Eastern side\n  { lat: 22.7767, lng: 86.6826 },  // South-east\n  { lat: 22.3571, lng: 85.9870 },  // Southern border\n  { lat: 22.2786, lng: 85.3999 },  // South-west\n  { lat: 22.7027, lng: 84.8895 },  // West\n  { lat: 23.1097, lng: 84.6137 },  // Mid-west\n  { lat: 23.7197, lng: 84.4003 },  // North-west\n  { lat: 24.0020, lng: 84.4666 },  // Closing the boundary\n];\n\n// Coordinates for the Ranchi polygon\nconst ranchiCoords = [\n  { lat: 23.2470, lng: 85.2632 }, // Northern point\n  { lat: 23.2436, lng: 85.3134 }, // Northeast point\n  { lat: 23.2882, lng: 85.3306 }, // East point\n  { lat: 23.3025, lng: 85.3660 }, // Southeast point\n  { lat: 23.3294, lng: 85.3848 }, // Southern point\n  { lat: 23.3561, lng: 85.3434 }, // Southwest point\n  { lat: 23.3081, lng: 85.2940 }, // West point\n  { lat: 23.2470, lng: 85.2632 },   // Closing the boundary\n];\n\nconst MapComponent = () => {\n  const { isLoaded } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: \"AIzaSyChN074R5gt4BfPTFox9UXnND0S8yyH6Dk\", // Replace with your Google Maps API key\n  });\n\n  const mapRef = useRef(null);  // Using useRef instead of state to store map instance\n\n  // Save the map instance when loaded\n  const onLoad = useCallback((mapInstance) => {\n    console.log(\"Map loaded:\", mapInstance);\n    mapRef.current = mapInstance;  // Store map instance in ref\n  }, []);\n\n  // Zoom in and fit the polygon's bounds when clicked\n  const handlePolygonClick = useCallback((polygonCoords) => {\n    const map = mapRef.current;\n    if (!map) {\n      console.log(\"Map instance not available.\");\n      return;\n    }\n\n    console.log(\"Polygon clicked, zooming in...\");\n    \n    const bounds = new window.google.maps.LatLngBounds();\n    polygonCoords.forEach(coord => bounds.extend(coord));\n    map.fitBounds(bounds);\n\n    // Optional: Set a custom zoom level after fitting bounds\n    const listener = window.google.maps.event.addListener(map, \"idle\", () => {\n      if (map.getZoom() > 10) {\n        map.setZoom(10);  // Set desired zoom level\n      }\n      window.google.maps.event.removeListener(listener); // Remove the listener after zooming\n    });\n  }, []);\n\n  return isLoaded ? (\n    <div style={{ position: 'relative' }}>\n      <GoogleMap\n        mapContainerStyle={containerStyle}\n        center={center}\n        zoom={zoomLevel}\n        onLoad={onLoad}\n      >\n        {/* Jharkhand Polygon */}\n        <PolygonF\n          paths={jharkhandCoords}\n          options={{\n            fillColor: '#00FF00',\n            strokeColor: '#000000',\n            fillOpacity: 0.5,\n          }}\n          onClick={() => {\n            console.log(\"Jharkhand polygon clicked\");\n            handlePolygonClick(jharkhandCoords);\n          }} // Zoom into Jharkhand when clicked\n        />\n\n        {/* Ranchi Polygon */}\n        <PolygonF\n          paths={ranchiCoords}\n          options={{\n            fillColor: '#FF5733', // Different color for Ranchi\n            strokeColor: '#000000',\n            fillOpacity: 0.5,\n          }}\n          onClick={() => {\n            console.log(\"Ranchi polygon clicked\");\n            handlePolygonClick(ranchiCoords);\n          }} // Zoom into Ranchi when clicked\n        />\n      </GoogleMap>\n    </div>\n  ) : <></>;\n};\n\nexport default MapComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
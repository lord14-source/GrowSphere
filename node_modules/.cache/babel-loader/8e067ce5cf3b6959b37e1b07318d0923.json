{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\Python\\\\my-app\\\\src\\\\components\\\\MapComponent.js\";\nimport React, { useState } from 'react';\nimport { GoogleMap, LoadScript, Polygon, Marker, InfoWindow } from '@react-google-maps/api';\nconst JharkhandMap = () => {\n  const mapStyles = {\n    height: \"100vh\",\n    width: \"100%\"\n  };\n  const defaultCenter = {\n    lat: 23.6102,\n    // Jharkhand's latitude\n    lng: 85.2799 // Jharkhand's longitude\n  };\n  const [selectedDistrict, setSelectedDistrict] = useState(null);\n  const [selectedBlock, setSelectedBlock] = useState(null);\n  const [selectedFPO, setSelectedFPO] = useState(null); // Track selected FPO for info window\n\n  // Define district polygons\n  const districtPolygons = [{\n    name: 'Ranchi',\n    path: [/* Array of coordinates for Ranchi */],\n    color: '#FF0000' // Red for Ranchi\n  }, {\n    name: 'Dhanbad',\n    path: [/* Array of coordinates for Dhanbad */],\n    color: '#00FF00' // Green for Dhanbad\n  }\n  // Add other districts similarly\n  ];\n\n  // Define blocks for each district\n  const blocksInDistrict = {\n    'Ranchi': [{\n      name: 'Block 1',\n      path: [/* Coordinates */],\n      color: '#FFD700'\n    }, {\n      name: 'Block 2',\n      path: [/* Coordinates */],\n      color: '#ADFF2F'\n    }],\n    'Dhanbad': [{\n      name: 'Block 1',\n      path: [/* Coordinates */],\n      color: '#FF4500'\n    }, {\n      name: 'Block 2',\n      path: [/* Coordinates */],\n      color: '#1E90FF'\n    }]\n  };\n\n  // Define FPOs and their sowing data\n  const fposInBlock = {\n    'Block 1': [{\n      name: 'FPO 1',\n      position: {\n        lat: 23.456,\n        lng: 85.234\n      },\n      productionData: {\n        tomato: 500,\n        // Sowing data for tomato (in tonnes, for example)\n        potato: 300,\n        strawberry: 100\n      }\n    }, {\n      name: 'FPO 2',\n      position: {\n        lat: 23.467,\n        lng: 85.245\n      },\n      productionData: {\n        tomato: 200,\n        potato: 400,\n        strawberry: 50\n      }\n    }],\n    'Block 2': [{\n      name: 'FPO 3',\n      position: {\n        lat: 23.456,\n        lng: 85.256\n      },\n      productionData: {\n        tomato: 600,\n        potato: 200,\n        strawberry: 70\n      }\n    }, {\n      name: 'FPO 4',\n      position: {\n        lat: 23.478,\n        lng: 85.278\n      },\n      productionData: {\n        tomato: 150,\n        potato: 500,\n        strawberry: 80\n      }\n    }]\n    // Define FPOs for other blocks\n  };\n  return /*#__PURE__*/React.createElement(LoadScript, {\n    googleMapsApiKey: \"YOUR_GOOGLE_MAPS_API_KEY\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(GoogleMap, {\n    mapContainerStyle: mapStyles,\n    zoom: 7,\n    center: defaultCenter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, districtPolygons.map((district, index) => /*#__PURE__*/React.createElement(Polygon, {\n    key: index,\n    paths: district.path,\n    options: {\n      fillColor: district.color,\n      fillOpacity: 0.4,\n      strokeColor: district.color,\n      strokeOpacity: 0.8,\n      strokeWeight: 2\n    },\n    onClick: () => {\n      setSelectedDistrict(district.name);\n      setSelectedBlock(null); // Reset block selection when switching district\n      setSelectedFPO(null); // Reset FPO selection\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  })), selectedDistrict && blocksInDistrict[selectedDistrict].map((block, index) => /*#__PURE__*/React.createElement(Polygon, {\n    key: index,\n    paths: block.path,\n    options: {\n      fillColor: block.color,\n      fillOpacity: 0.5,\n      strokeColor: block.color,\n      strokeOpacity: 0.8,\n      strokeWeight: 2\n    },\n    onClick: () => setSelectedBlock(block.name) // Set clicked block\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  })), selectedBlock && fposInBlock[selectedBlock].map((fpo, index) => /*#__PURE__*/React.createElement(Marker, {\n    key: index,\n    position: fpo.position,\n    label: fpo.name,\n    onClick: () => setSelectedFPO(fpo) // Set clicked FPO for InfoWindow\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 11\n    }\n  })), selectedFPO && /*#__PURE__*/React.createElement(InfoWindow, {\n    position: selectedFPO.position,\n    onCloseClick: () => setSelectedFPO(null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 15\n    }\n  }, selectedFPO.name), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 15\n    }\n  }, \"Tomato: \", selectedFPO.productionData.tomato, \" tonnes\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 15\n    }\n  }, \"Potato: \", selectedFPO.productionData.potato, \" tonnes\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 15\n    }\n  }, \"Strawberry: \", selectedFPO.productionData.strawberry, \" tonnes\")))));\n};\nexport default JharkhandMap;","map":{"version":3,"names":["React","useState","GoogleMap","LoadScript","Polygon","Marker","InfoWindow","JharkhandMap","mapStyles","height","width","defaultCenter","lat","lng","selectedDistrict","setSelectedDistrict","selectedBlock","setSelectedBlock","selectedFPO","setSelectedFPO","districtPolygons","name","path","color","blocksInDistrict","fposInBlock","position","productionData","tomato","potato","strawberry","createElement","googleMapsApiKey","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","mapContainerStyle","zoom","center","map","district","index","key","paths","options","fillColor","fillOpacity","strokeColor","strokeOpacity","strokeWeight","onClick","block","fpo","label","onCloseClick"],"sources":["C:/Users/hp/Desktop/Python/my-app/src/components/MapComponent.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { GoogleMap, LoadScript, Polygon, Marker, InfoWindow } from '@react-google-maps/api';\n\nconst JharkhandMap = () => {\n  const mapStyles = {\n    height: \"100vh\",\n    width: \"100%\"\n  };\n\n  const defaultCenter = {\n    lat: 23.6102, // Jharkhand's latitude\n    lng: 85.2799  // Jharkhand's longitude\n  };\n\n  const [selectedDistrict, setSelectedDistrict] = useState(null);\n  const [selectedBlock, setSelectedBlock] = useState(null);\n  const [selectedFPO, setSelectedFPO] = useState(null);  // Track selected FPO for info window\n\n  // Define district polygons\n  const districtPolygons = [\n    {\n      name: 'Ranchi',\n      path: [ /* Array of coordinates for Ranchi */ ],\n      color: '#FF0000' // Red for Ranchi\n    },\n    {\n      name: 'Dhanbad',\n      path: [ /* Array of coordinates for Dhanbad */ ],\n      color: '#00FF00' // Green for Dhanbad\n    }\n    // Add other districts similarly\n  ];\n\n  // Define blocks for each district\n  const blocksInDistrict = {\n    'Ranchi': [\n      { name: 'Block 1', path: [ /* Coordinates */ ], color: '#FFD700' },\n      { name: 'Block 2', path: [ /* Coordinates */ ], color: '#ADFF2F' },\n    ],\n    'Dhanbad': [\n      { name: 'Block 1', path: [ /* Coordinates */ ], color: '#FF4500' },\n      { name: 'Block 2', path: [ /* Coordinates */ ], color: '#1E90FF' },\n    ]\n  };\n\n  // Define FPOs and their sowing data\n  const fposInBlock = {\n    'Block 1': [\n      { \n        name: 'FPO 1', \n        position: { lat: 23.456, lng: 85.234 },\n        productionData: {\n          tomato: 500,  // Sowing data for tomato (in tonnes, for example)\n          potato: 300,\n          strawberry: 100\n        }\n      },\n      { \n        name: 'FPO 2', \n        position: { lat: 23.467, lng: 85.245 },\n        productionData: {\n          tomato: 200,\n          potato: 400,\n          strawberry: 50\n        }\n      }\n    ],\n    'Block 2': [\n      { \n        name: 'FPO 3', \n        position: { lat: 23.456, lng: 85.256 },\n        productionData: {\n          tomato: 600,\n          potato: 200,\n          strawberry: 70\n        }\n      },\n      { \n        name: 'FPO 4', \n        position: { lat: 23.478, lng: 85.278 },\n        productionData: {\n          tomato: 150,\n          potato: 500,\n          strawberry: 80\n        }\n      }\n    ]\n    // Define FPOs for other blocks\n  };\n\n  return (\n    <LoadScript googleMapsApiKey=\"YOUR_GOOGLE_MAPS_API_KEY\">\n      <GoogleMap\n        mapContainerStyle={mapStyles}\n        zoom={7}\n        center={defaultCenter}\n      >\n        {/* Display district polygons */}\n        {districtPolygons.map((district, index) => (\n          <Polygon\n            key={index}\n            paths={district.path}\n            options={{\n              fillColor: district.color,\n              fillOpacity: 0.4,\n              strokeColor: district.color,\n              strokeOpacity: 0.8,\n              strokeWeight: 2,\n            }}\n            onClick={() => {\n              setSelectedDistrict(district.name);\n              setSelectedBlock(null); // Reset block selection when switching district\n              setSelectedFPO(null);   // Reset FPO selection\n            }}\n          />\n        ))}\n\n        {/* Display blocks if a district is selected */}\n        {selectedDistrict && blocksInDistrict[selectedDistrict].map((block, index) => (\n          <Polygon\n            key={index}\n            paths={block.path}\n            options={{\n              fillColor: block.color,\n              fillOpacity: 0.5,\n              strokeColor: block.color,\n              strokeOpacity: 0.8,\n              strokeWeight: 2,\n            }}\n            onClick={() => setSelectedBlock(block.name)}  // Set clicked block\n          />\n        ))}\n\n        {/* Display FPOs if a block is selected */}\n        {selectedBlock && fposInBlock[selectedBlock].map((fpo, index) => (\n          <Marker\n            key={index}\n            position={fpo.position}\n            label={fpo.name}\n            onClick={() => setSelectedFPO(fpo)}  // Set clicked FPO for InfoWindow\n          />\n        ))}\n\n        {/* Display InfoWindow for selected FPO */}\n        {selectedFPO && (\n          <InfoWindow\n            position={selectedFPO.position}\n            onCloseClick={() => setSelectedFPO(null)}\n          >\n            <div>\n              <h4>{selectedFPO.name}</h4>\n              <p>Tomato: {selectedFPO.productionData.tomato} tonnes</p>\n              <p>Potato: {selectedFPO.productionData.potato} tonnes</p>\n              <p>Strawberry: {selectedFPO.productionData.strawberry} tonnes</p>\n            </div>\n          </InfoWindow>\n        )}\n      </GoogleMap>\n    </LoadScript>\n  );\n};\n\nexport default JharkhandMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
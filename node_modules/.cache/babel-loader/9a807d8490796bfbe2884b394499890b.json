{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\Python\\\\my-app\\\\src\\\\components\\\\MapComponent.js\";\nimport { GoogleMap, PolygonF, useJsApiLoader } from '@react-google-maps/api';\nimport React, { useState } from 'react';\nconst containerStyle = {\n  width: '100%',\n  height: '600px'\n};\n\n// Center point set to India level\nconst center = {\n  lat: 20.5937,\n  // Latitude of India\n  lng: 78.9629 // Longitude of India\n};\nconst zoomLevel = 5; // Adjusted zoom level for the India view\n\n// Coordinates for the Jharkhand polygon (and more if needed for other states)\nconst statePolygons = {\n  Jharkhand: [{\n    lat: 24.3011,\n    lng: 84.4983\n  }, {\n    lat: 24.4260,\n    lng: 84.3156\n  }, {\n    lat: 24.5617,\n    lng: 84.2892\n  }, {\n    lat: 24.5683,\n    lng: 84.1817\n  }, {\n    lat: 24.5303,\n    lng: 84.0994\n  }, {\n    lat: 24.6567,\n    lng: 83.9983\n  }, {\n    lat: 24.5661,\n    lng: 83.9333\n  }, {\n    lat: 24.5497,\n    lng: 83.8011\n  }, {\n    lat: 24.5467,\n    lng: 83.5272\n  }, {\n    lat: 24.5225,\n    lng: 83.3947\n  }, {\n    lat: 24.4186,\n    lng: 85.0219\n  }, {\n    lat: 24.4003,\n    lng: 84.8878\n  }, {\n    lat: 24.4262,\n    lng: 85.0422\n  }]\n  // Add more states and their coordinates as needed\n};\nconst MapComponent = () => {\n  const {\n    isLoaded\n  } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: \"AIzaSyChN074R5gt4BfPTFox9UXnND0S8yyH6Dk\"\n  });\n  const [map, setMap] = useState(null);\n  const handlePolygonClick = (polygonCoords, zoomLevel) => {\n    if (!map) return; // Ensure map is defined\n    const bounds = new window.google.maps.LatLngBounds();\n    polygonCoords.forEach(coord => bounds.extend(coord));\n    const polygonCenter = bounds.getCenter();\n    map.setCenter(polygonCenter);\n    map.setZoom(zoomLevel);\n  };\n  const onLoad = mapInstance => {\n    setMap(mapInstance);\n  };\n  const onMapClick = event => {\n    // Check if click is within a state's polygon\n    for (const state in statePolygons) {\n      const coords = statePolygons[state];\n      const bounds = new window.google.maps.LatLngBounds();\n      coords.forEach(coord => bounds.extend(coord));\n\n      // Check if the clicked point is within the bounds of the state\n      if (bounds.contains(event.latLng)) {\n        handlePolygonClick(coords, 8); // Zoom level can be adjusted\n        break;\n      }\n    }\n  };\n  return isLoaded ? /*#__PURE__*/React.createElement(GoogleMap, {\n    mapContainerStyle: containerStyle,\n    center: center,\n    zoom: zoomLevel,\n    onLoad: onLoad,\n    onClick: onMapClick // Handle map click\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, Object.entries(statePolygons).map(([state, coords]) => /*#__PURE__*/React.createElement(PolygonF, {\n    key: state,\n    paths: coords,\n    options: {\n      fillColor: '#00FF00',\n      strokeColor: '#000000',\n      fillOpacity: 0.5\n    },\n    onClick: () => handlePolygonClick(coords, 8) // Optional: zoom on polygon click\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }))) : /*#__PURE__*/React.createElement(React.Fragment, null);\n};\nexport default MapComponent;","map":{"version":3,"names":["GoogleMap","PolygonF","useJsApiLoader","React","useState","containerStyle","width","height","center","lat","lng","zoomLevel","statePolygons","Jharkhand","MapComponent","isLoaded","id","googleMapsApiKey","map","setMap","handlePolygonClick","polygonCoords","bounds","window","google","maps","LatLngBounds","forEach","coord","extend","polygonCenter","getCenter","setCenter","setZoom","onLoad","mapInstance","onMapClick","event","state","coords","contains","latLng","createElement","mapContainerStyle","zoom","onClick","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","key","paths","options","fillColor","strokeColor","fillOpacity","Fragment"],"sources":["C:/Users/hp/Desktop/Python/my-app/src/components/MapComponent.js"],"sourcesContent":["import { GoogleMap, PolygonF, useJsApiLoader } from '@react-google-maps/api';\nimport React, { useState } from 'react';\n\nconst containerStyle = {\n  width: '100%',\n  height: '600px',\n};\n\n// Center point set to India level\nconst center = {\n  lat: 20.5937,  // Latitude of India\n  lng: 78.9629,  // Longitude of India\n};\n\nconst zoomLevel = 5;  // Adjusted zoom level for the India view\n\n// Coordinates for the Jharkhand polygon (and more if needed for other states)\nconst statePolygons = {\n  Jharkhand: [\n    { lat: 24.3011, lng: 84.4983 },\n    { lat: 24.4260, lng: 84.3156 },\n    { lat: 24.5617, lng: 84.2892 },\n    { lat: 24.5683, lng: 84.1817 },\n    { lat: 24.5303, lng: 84.0994 },\n    { lat: 24.6567, lng: 83.9983 },\n    { lat: 24.5661, lng: 83.9333 },\n    { lat: 24.5497, lng: 83.8011 },\n    { lat: 24.5467, lng: 83.5272 },\n    { lat: 24.5225, lng: 83.3947 },\n    { lat: 24.4186, lng: 85.0219 },\n    { lat: 24.4003, lng: 84.8878 },\n    { lat: 24.4262, lng: 85.0422 },\n  ],\n  // Add more states and their coordinates as needed\n};\n\nconst MapComponent = () => {\n  const { isLoaded } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: \"AIzaSyChN074R5gt4BfPTFox9UXnND0S8yyH6Dk\",\n  });\n\n  const [map, setMap] = useState(null);\n\n  const handlePolygonClick = (polygonCoords, zoomLevel) => {\n    if (!map) return; // Ensure map is defined\n    const bounds = new window.google.maps.LatLngBounds();\n    polygonCoords.forEach(coord => bounds.extend(coord));\n    const polygonCenter = bounds.getCenter();\n\n    map.setCenter(polygonCenter);\n    map.setZoom(zoomLevel);\n  };\n\n  const onLoad = (mapInstance) => {\n    setMap(mapInstance);\n  };\n\n  const onMapClick = (event) => {\n    // Check if click is within a state's polygon\n    for (const state in statePolygons) {\n      const coords = statePolygons[state];\n      const bounds = new window.google.maps.LatLngBounds();\n      coords.forEach(coord => bounds.extend(coord));\n\n      // Check if the clicked point is within the bounds of the state\n      if (bounds.contains(event.latLng)) {\n        handlePolygonClick(coords, 8); // Zoom level can be adjusted\n        break;\n      }\n    }\n  };\n\n  return isLoaded ? (\n    <GoogleMap\n      mapContainerStyle={containerStyle}\n      center={center}\n      zoom={zoomLevel}\n      onLoad={onLoad}\n      onClick={onMapClick} // Handle map click\n    >\n      {Object.entries(statePolygons).map(([state, coords]) => (\n        <PolygonF\n          key={state}\n          paths={coords}\n          options={{ fillColor: '#00FF00', strokeColor: '#000000', fillOpacity: 0.5 }}\n          onClick={() => handlePolygonClick(coords, 8)} // Optional: zoom on polygon click\n        />\n      ))}\n    </GoogleMap>\n  ) : <></>;\n};\n\nexport default MapComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
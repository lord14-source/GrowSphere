{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\Python\\\\my-app\\\\src\\\\components\\\\MapComponent.js\";\nimport { GoogleMap, HeatmapLayer, InfoWindow, LoadScript, Marker, Polygon } from '@react-google-maps/api';\nimport React, { useRef, useState } from 'react';\nconst MapComponent = ({\n  yieldForecast,\n  farmCoordinates,\n  heatmapData,\n  mapCenter,\n  mapZoom,\n  markerData\n}) => {\n  const mapRef = useRef(null);\n  const [map, setMap] = useState(null);\n  const [selectedMarker, setSelectedMarker] = useState(null); // To track the clicked marker\n\n  // Dynamically determine the color based on the yield forecast\n  const determineColor = yieldForecast => {\n    if (yieldForecast < 50) {\n      return '#FF0000'; // Red for low yield\n    } else if (yieldForecast >= 50 && yieldForecast < 75) {\n      return '#FFFF00'; // Yellow for medium yield\n    } else {\n      return '#00FF00'; // Green for high yield\n    }\n  };\n  const onLoad = mapInstance => {\n    setMap(mapInstance);\n  };\n  return /*#__PURE__*/React.createElement(LoadScript, {\n    googleMapsApiKey: \"AIzaSyD0KaEX-bXcnOS7XFfLKnVyiet_Kfi-8xM\",\n    libraries: [\"visualization\"],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(GoogleMap, {\n    onLoad: onLoad,\n    mapContainerStyle: {\n      height: '400px',\n      width: '100%'\n    },\n    center: mapCenter || {\n      lat: 25.774,\n      lng: -80.190\n    } // Default to a specific location\n    ,\n    zoom: mapZoom || 5 // Default zoom level\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, map && /*#__PURE__*/React.createElement(React.Fragment, null, farmCoordinates && /*#__PURE__*/React.createElement(Polygon, {\n    paths: farmCoordinates,\n    options: {\n      strokeColor: '#000000',\n      strokeOpacity: 0.8,\n      strokeWeight: 2,\n      fillColor: determineColor(yieldForecast),\n      fillOpacity: 0.6\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 15\n    }\n  }), heatmapData && /*#__PURE__*/React.createElement(HeatmapLayer, {\n    data: heatmapData.map(coord => new window.google.maps.LatLng(coord.lat, coord.lng)),\n    options: {\n      radius: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 15\n    }\n  }), markerData && markerData.map((marker, index) => /*#__PURE__*/React.createElement(Marker, {\n    key: index,\n    position: {\n      lat: marker.lat,\n      lng: marker.lng\n    },\n    icon: {\n      url: marker.iconUrl || \"http://maps.google.com/mapfiles/ms/icons/red-dot.png\",\n      // Custom icon if provided, fallback to default\n      scaledSize: new window.google.maps.Size(40, 40) // Custom size of the icon\n    },\n    onClick: () => setSelectedMarker(marker) // Open InfoWindow when clicked\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }\n  })), selectedMarker && /*#__PURE__*/React.createElement(InfoWindow, {\n    position: {\n      lat: selectedMarker.lat,\n      lng: selectedMarker.lng\n    },\n    onCloseClick: () => setSelectedMarker(null) // Close InfoWindow on close\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 19\n    }\n  }, selectedMarker.title), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 19\n    }\n  }, selectedMarker.description))))));\n};\n\n// Example usage\n// import MapComponent from './MapComponent';\n\n// const farmCoordinates = [\n//   { lat: 25.774, lng: -80.190 },\n//   { lat: 18.466, lng: -66.118 },\n//   { lat: 32.321, lng: -64.757 },\n//   { lat: 25.774, lng: -80.190 }\n// ];\n\n// const heatmapData = [\n//   { lat: 37.782, lng: -122.447 },\n//   { lat: 37.782, lng: -122.445 },\n//   { lat: 37.782, lng: -122.443 }\n// ];\n\n// const markerData = [\n//   {\n//     lat: 25.774,\n//     lng: -80.190,\n//     title: \"Marker 1\",\n//     description: \"This is the first marker.\",\n//     iconUrl: \"http://maps.google.com/mapfiles/ms/icons/green-dot.png\" // Optional custom marker icon\n//   },\n//   {\n//     lat: 18.466,\n//     lng: -66.118,\n//     title: \"Marker 2\",\n//     description: \"This is the second marker.\",\n//     iconUrl: \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\"\n//   }\n// ];\n\n// <MapComponent\n//   yieldForecast={60}\n//   farmCoordinates={farmCoordinates}\n//   heatmapData={heatmapData}\n//   mapCenter={{ lat: 37.7749, lng: -122.4194 }} // Center on San Francisco\n//   mapZoom={8} // Zoom level\n//   markerData={markerData} // Pass marker data\n// />\n\nexport default MapComponent;","map":{"version":3,"names":["GoogleMap","HeatmapLayer","InfoWindow","LoadScript","Marker","Polygon","React","useRef","useState","MapComponent","yieldForecast","farmCoordinates","heatmapData","mapCenter","mapZoom","markerData","mapRef","map","setMap","selectedMarker","setSelectedMarker","determineColor","onLoad","mapInstance","createElement","googleMapsApiKey","libraries","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","mapContainerStyle","height","width","center","lat","lng","zoom","Fragment","paths","options","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","data","coord","window","google","maps","LatLng","radius","marker","index","key","position","icon","url","iconUrl","scaledSize","Size","onClick","onCloseClick","title","description"],"sources":["C:/Users/hp/Desktop/Python/my-app/src/components/MapComponent.js"],"sourcesContent":["import { GoogleMap, HeatmapLayer, InfoWindow, LoadScript, Marker, Polygon } from '@react-google-maps/api';\nimport React, { useRef, useState } from 'react';\n\nconst MapComponent = ({ yieldForecast, farmCoordinates, heatmapData, mapCenter, mapZoom, markerData }) => {\n  const mapRef = useRef(null);\n  const [map, setMap] = useState(null);\n  const [selectedMarker, setSelectedMarker] = useState(null); // To track the clicked marker\n\n  // Dynamically determine the color based on the yield forecast\n  const determineColor = (yieldForecast) => {\n    if (yieldForecast < 50) {\n      return '#FF0000'; // Red for low yield\n    } else if (yieldForecast >= 50 && yieldForecast < 75) {\n      return '#FFFF00'; // Yellow for medium yield\n    } else {\n      return '#00FF00'; // Green for high yield\n    }\n  };\n\n  const onLoad = (mapInstance) => {\n    setMap(mapInstance);\n  };\n\n  return (\n    <LoadScript\n      googleMapsApiKey=\"AIzaSyD0KaEX-bXcnOS7XFfLKnVyiet_Kfi-8xM\"\n      libraries={[\"visualization\"]}\n    >\n      <GoogleMap\n        onLoad={onLoad}\n        mapContainerStyle={{ height: '400px', width: '100%' }}\n        center={mapCenter || { lat: 25.774, lng: -80.190 }} // Default to a specific location\n        zoom={mapZoom || 5} // Default zoom level\n      >\n        {map && (\n          <>\n            {/* Dynamic Polygon with color based on yieldForecast */}\n            {farmCoordinates && (\n              <Polygon\n                paths={farmCoordinates}\n                options={{\n                  strokeColor: '#000000',\n                  strokeOpacity: 0.8,\n                  strokeWeight: 2,\n                  fillColor: determineColor(yieldForecast),\n                  fillOpacity: 0.6\n                }}\n              />\n            )}\n\n            {/* Dynamic Heatmap Layer */}\n            {heatmapData && (\n              <HeatmapLayer\n                data={heatmapData.map(coord => new window.google.maps.LatLng(coord.lat, coord.lng))}\n                options={{ radius: 20 }}\n              />\n            )}\n\n            {/* Custom Markers with InfoWindow */}\n            {markerData && markerData.map((marker, index) => (\n              <Marker\n                key={index}\n                position={{ lat: marker.lat, lng: marker.lng }}\n                icon={{\n                  url: marker.iconUrl || \"http://maps.google.com/mapfiles/ms/icons/red-dot.png\", // Custom icon if provided, fallback to default\n                  scaledSize: new window.google.maps.Size(40, 40) // Custom size of the icon\n                }}\n                onClick={() => setSelectedMarker(marker)} // Open InfoWindow when clicked\n              />\n            ))}\n\n            {/* InfoWindow for the selected marker */}\n            {selectedMarker && (\n              <InfoWindow\n                position={{ lat: selectedMarker.lat, lng: selectedMarker.lng }}\n                onCloseClick={() => setSelectedMarker(null)} // Close InfoWindow on close\n              >\n                <div>\n                  <h4>{selectedMarker.title}</h4>\n                  <p>{selectedMarker.description}</p>\n                </div>\n              </InfoWindow>\n            )}\n          </>\n        )}\n      </GoogleMap>\n    </LoadScript>\n  );\n};\n\n// Example usage\n// import MapComponent from './MapComponent';\n\n// const farmCoordinates = [\n//   { lat: 25.774, lng: -80.190 },\n//   { lat: 18.466, lng: -66.118 },\n//   { lat: 32.321, lng: -64.757 },\n//   { lat: 25.774, lng: -80.190 }\n// ];\n\n// const heatmapData = [\n//   { lat: 37.782, lng: -122.447 },\n//   { lat: 37.782, lng: -122.445 },\n//   { lat: 37.782, lng: -122.443 }\n// ];\n\n// const markerData = [\n//   {\n//     lat: 25.774,\n//     lng: -80.190,\n//     title: \"Marker 1\",\n//     description: \"This is the first marker.\",\n//     iconUrl: \"http://maps.google.com/mapfiles/ms/icons/green-dot.png\" // Optional custom marker icon\n//   },\n//   {\n//     lat: 18.466,\n//     lng: -66.118,\n//     title: \"Marker 2\",\n//     description: \"This is the second marker.\",\n//     iconUrl: \"http://maps.google.com/mapfiles/ms/icons/blue-dot.png\"\n//   }\n// ];\n\n// <MapComponent\n//   yieldForecast={60}\n//   farmCoordinates={farmCoordinates}\n//   heatmapData={heatmapData}\n//   mapCenter={{ lat: 37.7749, lng: -122.4194 }} // Center on San Francisco\n//   mapZoom={8} // Zoom level\n//   markerData={markerData} // Pass marker data\n// />\n\nexport default MapComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
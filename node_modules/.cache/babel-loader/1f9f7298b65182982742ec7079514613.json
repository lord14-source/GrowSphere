{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\Python\\\\my-app\\\\src\\\\components\\\\MapComponent.js\";\nimport { GoogleMap, PolygonF, useJsApiLoader } from '@react-google-maps/api';\nimport React, { useCallback, useState } from 'react';\nconst containerStyle = {\n  width: '100%',\n  height: '600px'\n};\n\n// Center point set to India level\nconst center = {\n  lat: 23.6102,\n  // Latitude of Jharkhand\n  lng: 85.2799 // Longitude of Jharkhand\n};\nconst zoomLevel = 6; // Adjusted zoom level for a better view\n\n// Coordinates for the Jharkhand polygon\nconst jharkhandCoords = [{\n  lat: 24.4366,\n  lng: 84.2201\n},\n// Northern border\n{\n  lat: 24.1851,\n  lng: 85.0568\n},\n// Slightly south\n{\n  lat: 23.9867,\n  lng: 85.6182\n},\n// Mid-north\n{\n  lat: 23.6255,\n  lng: 86.4194\n},\n// North-east\n{\n  lat: 23.1986,\n  lng: 86.8941\n},\n// Eastern side\n{\n  lat: 22.7767,\n  lng: 86.6826\n},\n// South-east\n{\n  lat: 22.3571,\n  lng: 85.9870\n},\n// Southern border\n{\n  lat: 22.2786,\n  lng: 85.3999\n},\n// South-west\n{\n  lat: 22.7027,\n  lng: 84.8895\n},\n// West\n{\n  lat: 23.1097,\n  lng: 84.6137\n},\n// Mid-west\n{\n  lat: 23.7197,\n  lng: 84.4003\n},\n// North-west\n{\n  lat: 24.0020,\n  lng: 84.4666\n} // Closing the boundary\n];\nconst MapComponent = () => {\n  const {\n    isLoaded\n  } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: \"AIzaSyChN074R5gt4BfPTFox9UXnND0S8yyH6Dk\" // Replace with your Google Maps API key\n  });\n  const [map, setMap] = useState(null);\n\n  // Zoom in and fit the polygon's bounds when it's clicked\n  const handlePolygonClick = useCallback(() => {\n    if (!map) return;\n    const bounds = new window.google.maps.LatLngBounds();\n\n    // Extend the bounds to include each coordinate in the polygon\n    jharkhandCoords.forEach(coord => bounds.extend(coord));\n\n    // Fit the map to the bounds of the polygon\n    map.fitBounds(bounds);\n\n    // Optional: Set a custom zoom level after fitting bounds, if necessary\n    const listener = window.google.maps.event.addListener(map, \"idle\", () => {\n      if (map.getZoom() > 10) {\n        // Adjust zoom level after fitting bounds\n        map.setZoom(10); // You can set this zoom level as per your requirement\n      }\n      window.google.maps.event.removeListener(listener);\n    });\n  }, [map]);\n\n  // Save the map instance when loaded\n  const onLoad = useCallback(mapInstance => {\n    setMap(mapInstance);\n  }, []);\n  return isLoaded ? /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      position: 'relative'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(GoogleMap, {\n    mapContainerStyle: containerStyle,\n    center: center,\n    zoom: zoomLevel,\n    onLoad: onLoad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(PolygonF, {\n    paths: jharkhandCoords,\n    options: {\n      fillColor: '#00FF00',\n      strokeColor: '#000000',\n      fillOpacity: 0.5\n    },\n    onClick: handlePolygonClick // Zoom into the polygon when clicked\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }))) : /*#__PURE__*/React.createElement(React.Fragment, null);\n};\nexport default MapComponent;","map":{"version":3,"names":["GoogleMap","PolygonF","useJsApiLoader","React","useCallback","useState","containerStyle","width","height","center","lat","lng","zoomLevel","jharkhandCoords","MapComponent","isLoaded","id","googleMapsApiKey","map","setMap","handlePolygonClick","bounds","window","google","maps","LatLngBounds","forEach","coord","extend","fitBounds","listener","event","addListener","getZoom","setZoom","removeListener","onLoad","mapInstance","createElement","style","position","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","mapContainerStyle","zoom","paths","options","fillColor","strokeColor","fillOpacity","onClick","Fragment"],"sources":["C:/Users/hp/Desktop/Python/my-app/src/components/MapComponent.js"],"sourcesContent":["import { GoogleMap, PolygonF, useJsApiLoader } from '@react-google-maps/api';\nimport React, { useCallback, useState } from 'react';\n\nconst containerStyle = {\n  width: '100%',\n  height: '600px',\n};\n\n// Center point set to India level\nconst center = {\n  lat: 23.6102,  // Latitude of Jharkhand\n  lng: 85.2799,  // Longitude of Jharkhand\n};\n\nconst zoomLevel = 6;  // Adjusted zoom level for a better view\n\n// Coordinates for the Jharkhand polygon\nconst jharkhandCoords = [\n  { lat: 24.4366, lng: 84.2201 },  // Northern border\n  { lat: 24.1851, lng: 85.0568 },  // Slightly south\n  { lat: 23.9867, lng: 85.6182 },  // Mid-north\n  { lat: 23.6255, lng: 86.4194 },  // North-east\n  { lat: 23.1986, lng: 86.8941 },  // Eastern side\n  { lat: 22.7767, lng: 86.6826 },  // South-east\n  { lat: 22.3571, lng: 85.9870 },  // Southern border\n  { lat: 22.2786, lng: 85.3999 },  // South-west\n  { lat: 22.7027, lng: 84.8895 },  // West\n  { lat: 23.1097, lng: 84.6137 },  // Mid-west\n  { lat: 23.7197, lng: 84.4003 },  // North-west\n  { lat: 24.0020, lng: 84.4666 },  // Closing the boundary\n];\n\nconst MapComponent = () => {\n  const { isLoaded } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: \"AIzaSyChN074R5gt4BfPTFox9UXnND0S8yyH6Dk\", // Replace with your Google Maps API key\n  });\n\n  const [map, setMap] = useState(null);\n\n  // Zoom in and fit the polygon's bounds when it's clicked\n  const handlePolygonClick = useCallback(() => {\n    if (!map) return;\n\n    const bounds = new window.google.maps.LatLngBounds();\n    \n    // Extend the bounds to include each coordinate in the polygon\n    jharkhandCoords.forEach(coord => bounds.extend(coord));\n    \n    // Fit the map to the bounds of the polygon\n    map.fitBounds(bounds);\n    \n    // Optional: Set a custom zoom level after fitting bounds, if necessary\n    const listener = window.google.maps.event.addListener(map, \"idle\", () => {\n      if (map.getZoom() > 10) {  // Adjust zoom level after fitting bounds\n        map.setZoom(10);  // You can set this zoom level as per your requirement\n      }\n      window.google.maps.event.removeListener(listener);\n    });\n  }, [map]);\n\n  // Save the map instance when loaded\n  const onLoad = useCallback((mapInstance) => {\n    setMap(mapInstance);\n  }, []);\n\n  return isLoaded ? (\n    <div style={{ position: 'relative' }}>\n      {/* Map container */}\n      <GoogleMap\n        mapContainerStyle={containerStyle}\n        center={center}\n        zoom={zoomLevel}\n        onLoad={onLoad}\n      >\n        {/* Jharkhand Polygon */}\n        <PolygonF\n          paths={jharkhandCoords}\n          options={{\n            fillColor: '#00FF00',\n            strokeColor: '#000000',\n            fillOpacity: 0.5,\n          }}\n          onClick={handlePolygonClick}  // Zoom into the polygon when clicked\n        />\n      </GoogleMap>\n    </div>\n  ) : <></>;\n};\n\nexport default MapComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}
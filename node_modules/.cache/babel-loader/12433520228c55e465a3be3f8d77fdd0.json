{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\Python\\\\my-app\\\\src\\\\components\\\\MapComponent.js\";\nimport { GoogleMap, PolygonF, useJsApiLoader } from '@react-google-maps/api';\nimport React, { useState } from 'react';\nconst containerStyle = {\n  width: '100%',\n  height: '600px'\n};\n\n// Center point set to India level\nconst center = {\n  lat: 20.5937,\n  // Latitude of India\n  lng: 78.9629 // Longitude of India\n};\nconst zoomLevel = 5; // Adjusted zoom level for the India view\n\n// Coordinates for the Jharkhand polygon\nconst jharkhandCoords = [{\n  lat: 24.3011,\n  lng: 84.4983\n}, {\n  lat: 24.4260,\n  lng: 84.3156\n}, {\n  lat: 24.5617,\n  lng: 84.2892\n}, {\n  lat: 24.5683,\n  lng: 84.1817\n}, {\n  lat: 24.5303,\n  lng: 84.0994\n}, {\n  lat: 24.6567,\n  lng: 83.9983\n}, {\n  lat: 24.5661,\n  lng: 83.9333\n}, {\n  lat: 24.5497,\n  lng: 83.8011\n}, {\n  lat: 24.5467,\n  lng: 83.5272\n}, {\n  lat: 24.5225,\n  lng: 83.3947\n}, {\n  lat: 24.4186,\n  lng: 85.0219\n}, {\n  lat: 24.4003,\n  lng: 84.8878\n}, {\n  lat: 24.4262,\n  lng: 85.0422\n}];\nconst MapComponent = () => {\n  const {\n    isLoaded\n  } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: \"AIzaSyChN074R5gt4BfPTFox9UXnND0S8yyH6Dk\"\n  });\n  const [map, setMap] = useState(null);\n  const [showJharkhandPolygon, setShowJharkhandPolygon] = useState(true); // State for toggling polygon\n\n  const handlePolygonClick = (polygonCoords, zoomLevel) => {\n    if (!map) return; // Ensure map is defined\n    const bounds = new window.google.maps.LatLngBounds();\n    polygonCoords.forEach(coord => bounds.extend(coord));\n    const polygonCenter = bounds.getCenter();\n    map.setCenter(polygonCenter);\n    map.setZoom(zoomLevel);\n  };\n  const onLoad = mapInstance => {\n    setMap(mapInstance);\n  };\n\n  // Function to toggle polygon visibility\n  const togglePolygon = () => {\n    setShowJharkhandPolygon(prev => !prev);\n  };\n  return isLoaded ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: togglePolygon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, showJharkhandPolygon ? 'Hide Jharkhand Polygon' : 'Show Jharkhand Polygon'), /*#__PURE__*/React.createElement(GoogleMap, {\n    mapContainerStyle: containerStyle,\n    center: center,\n    zoom: zoomLevel,\n    onLoad: onLoad,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, showJharkhandPolygon && /*#__PURE__*/React.createElement(PolygonF, {\n    paths: jharkhandCoords,\n    options: {\n      fillColor: '#00FF00',\n      strokeColor: '#000000'\n    },\n    onClick: () => handlePolygonClick(jharkhandCoords, 8) // Zoom to level 8 on click\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }))) : /*#__PURE__*/React.createElement(React.Fragment, null);\n};\nexport default MapComponent;","map":{"version":3,"names":["GoogleMap","PolygonF","useJsApiLoader","React","useState","containerStyle","width","height","center","lat","lng","zoomLevel","jharkhandCoords","MapComponent","isLoaded","id","googleMapsApiKey","map","setMap","showJharkhandPolygon","setShowJharkhandPolygon","handlePolygonClick","polygonCoords","bounds","window","google","maps","LatLngBounds","forEach","coord","extend","polygonCenter","getCenter","setCenter","setZoom","onLoad","mapInstance","togglePolygon","prev","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onClick","mapContainerStyle","zoom","paths","options","fillColor","strokeColor","Fragment"],"sources":["C:/Users/hp/Desktop/Python/my-app/src/components/MapComponent.js"],"sourcesContent":["import { GoogleMap, PolygonF, useJsApiLoader } from '@react-google-maps/api';\nimport React, { useState } from 'react';\n\nconst containerStyle = {\n  width: '100%',\n  height: '600px',\n};\n\n// Center point set to India level\nconst center = {\n  lat: 20.5937,  // Latitude of India\n  lng: 78.9629,  // Longitude of India\n};\n\nconst zoomLevel = 5;  // Adjusted zoom level for the India view\n\n// Coordinates for the Jharkhand polygon\nconst jharkhandCoords = [\n  { lat: 24.3011, lng: 84.4983 },\n  { lat: 24.4260, lng: 84.3156 },\n  { lat: 24.5617, lng: 84.2892 },\n  { lat: 24.5683, lng: 84.1817 },\n  { lat: 24.5303, lng: 84.0994 },\n  { lat: 24.6567, lng: 83.9983 },\n  { lat: 24.5661, lng: 83.9333 },\n  { lat: 24.5497, lng: 83.8011 },\n  { lat: 24.5467, lng: 83.5272 },\n  { lat: 24.5225, lng: 83.3947 },\n  { lat: 24.4186, lng: 85.0219 },\n  { lat: 24.4003, lng: 84.8878 },\n  { lat: 24.4262, lng: 85.0422 },\n];\n\nconst MapComponent = () => {\n  const { isLoaded } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: \"AIzaSyChN074R5gt4BfPTFox9UXnND0S8yyH6Dk\",\n  });\n\n  const [map, setMap] = useState(null);\n  const [showJharkhandPolygon, setShowJharkhandPolygon] = useState(true); // State for toggling polygon\n\n  const handlePolygonClick = (polygonCoords, zoomLevel) => {\n    if (!map) return; // Ensure map is defined\n    const bounds = new window.google.maps.LatLngBounds();\n    polygonCoords.forEach(coord => bounds.extend(coord));\n    const polygonCenter = bounds.getCenter();\n\n    map.setCenter(polygonCenter);\n    map.setZoom(zoomLevel);\n  };\n\n  const onLoad = (mapInstance) => {\n    setMap(mapInstance);\n  };\n\n  // Function to toggle polygon visibility\n  const togglePolygon = () => {\n    setShowJharkhandPolygon(prev => !prev);\n  };\n\n  return isLoaded ? (\n    <div>\n      <button onClick={togglePolygon}>\n        {showJharkhandPolygon ? 'Hide Jharkhand Polygon' : 'Show Jharkhand Polygon'}\n      </button>\n      <GoogleMap\n        mapContainerStyle={containerStyle}\n        center={center}\n        zoom={zoomLevel}\n        onLoad={onLoad}\n      >\n        {showJharkhandPolygon && (\n          <PolygonF\n            paths={jharkhandCoords}\n            options={{ fillColor: '#00FF00', strokeColor: '#000000' }}\n            onClick={() => handlePolygonClick(jharkhandCoords, 8)} // Zoom to level 8 on click\n          />\n        )}\n      </GoogleMap>\n    </div>\n  ) : <></>;\n};\n\nexport default MapComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}